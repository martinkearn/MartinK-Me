@page "/shortcuts"
@inject IStorageService StorageService
@using System.Text;
@layout ShortcutLayout;

<PageTitle>@WebStrings.TitlePrefix - Shortcuts</PageTitle>

<div class="container-fluid" style="@_activeWallpaperStyle">
    @if (_groups.Count == 0)
    {   
        <p>No Shortcuts</p>
    }
    else
    {
        @foreach (var group in _groups)
        {
            <div class="mb-5">
                <h3 class="d-inline me-4">@group</h3>
                <p class="d-inline">
                    @foreach (var s in _shortcuts.Where(s => string.Equals(s.Group, group, StringComparison.CurrentCultureIgnoreCase)))
                    {
                        <a href="@s.Url" class="me-4 mb-4">@s.Title</a>
                    }
                </p>
            </div>
        }
    }

    <div>
        <button type="button" class="btn btn-secondary me-3" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button>
        <button type="button" class="btn btn-primary me-3" data-bs-toggle="modal" data-bs-target="#addModal">Add</button>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="deleteModalLabel">Delete Shortcut</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
            <div class="mb-3">
                <label for="addTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="deleteTitle" @bind-value=@_deleteTitle >
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" @onclick="Delete">Delete</button>
      </div>
    </div>
  </div>
</div>

<!-- Add Modal -->
<div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="addModalLabel">Add Shortcut</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
            <div class="mb-3">
                <label for="addTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="addTitle" @bind-value=@_newTitle >
            </div>
            <div class="mb-3">
                <label for="addUrl" class="form-label">Url</label>
                <input type="text" class="form-control" id="addUrl" @bind-value=@_newUrl >
            </div>
            <div class="mb-3">
                <label for="addGroup" class="form-label">Group</label>
                <input type="text" class="form-control" id="addGroup" @bind-value=@_newGroup >
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" @onclick="Create">Save</button>
      </div>
    </div>
  </div>
</div>

@code {
    private List<Shortcut> _shortcuts = new();

    private List<string> _groups = new();
    
    private string _activeWallpaperStyle;

    private string _deleteTitle;

    private string _newTitle;

    private string _newUrl;

    private string _newGroup;

    protected override void OnInitialized()
    {
        var wallpaperUrls = StorageService.GetWallpaperUrls();

        if (wallpaperUrls.Count > 0)
        {
            var random = new Random();
            var index = random.Next(wallpaperUrls.Count);
            _activeWallpaperStyle = $"background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url({wallpaperUrls[index]}); background-size: cover; height: 100%;";
        }
        
        RefreshPage();
    }

    private void Create()
    {
        // Create url object
        var titleBytes = Encoding.UTF8.GetBytes(_newTitle.ToLowerInvariant());
        var s = new Shortcut()
        {
            Key = Convert.ToBase64String(titleBytes),
            Group = _newGroup,
            Title = _newTitle,
            Url = _newUrl
        };
        StorageService.UpsertShortcut(s);

        // Clear
        _newTitle = string.Empty;
        _newUrl = string.Empty;

        RefreshPage();
    }

    private void Delete()
    {
        var deleteShortcutKey = _shortcuts.Where(s => s.Title.ToLowerInvariant() == _deleteTitle.ToLowerInvariant()).FirstOrDefault()?.Key;
        StorageService.DeleteShortcut(deleteShortcutKey);

        // Clear
        _deleteTitle = string.Empty;

        RefreshPage();
    }

    private void RefreshPage()
    {
        _shortcuts = StorageService.QueryShortcuts(string.Empty, default);
        _groups = _shortcuts.Select(s => s.Group).Distinct().ToList();
    }
}
